[1mdiff --git a/SuperTools/AlembicLoader/v1/Node.py b/SuperTools/AlembicLoader/v1/Node.py[m
[1mindex 6636378..89c5282 100644[m
[1m--- a/SuperTools/AlembicLoader/v1/Node.py[m
[1m+++ b/SuperTools/AlembicLoader/v1/Node.py[m
[36m@@ -11,29 +11,25 @@[m [mclass AlembicLoaderNode(NodegraphAPI.SuperTool):[m
 [m
     def __init__(self):[m
         self.hideNodegraphGroupControls()[m
[31m-[m
         self.addOutputPort("output")[m
 [m
[31m-        self.getParameters().createChildString('location', '/root')[m
[31m-        self.getParameters().createChildString('folderPath', r'C:\Users\Ceci\Documents\_jobs\spinvfx\katana_test_products\products')[m
[31m-[m
[31m-        self.merge_node = NodegraphAPI.CreateNode('Merge', self)[m
[31m-        self.add_node_reference_param('node_merge', self.merge_node)[m
[32m+[m[32m        self.getParameters().createChildString("location", "/root")[m
[32m+[m[32m        self.getParameters().createChildString("folderPath", "")[m
 [m
[32m+[m[32m        self.merge_node = NodegraphAPI.CreateNode("Merge", self)[m
[32m+[m[32m        self.merge_pos = NodegraphAPI.GetNodePosition(self.merge_node)[m
[32m+[m[32m        self.add_node_reference_param("node_merge", self.merge_node)[m
         self.getReturnPort(self.getOutputPortByIndex(0).getName()).connect([m
[31m-            self.merge_node.getOutputPortByIndex(0))[m
[31m-[m
[31m-        self.__abc_nodes = {}    # {name:[1,2,5]}       {cube_geom:[1,2]}[m
[31m-[m
[31m-    def get_versions(self, geo_name):[m
[31m-        return self.__abc_nodes.get(geo_name)[m
[32m+[m[32m            self.merge_node.getOutputPortByIndex(0)[m
[32m+[m[32m        )[m
[32m+[m[32m        self.__name_to_versions = {}[m
 [m
     def add_node_reference_param(self, param_name, node):[m
[31m-        param = self.getParameter(param_name)   # 'node_' + node_name[m
[32m+[m[32m        param = self.getParameter(param_name)[m
         if not param:[m
[31m-            param = self.getParameters().createChildString(param_name, '')[m
[32m+[m[32m            param = self.getParameters().createChildString(param_name, "")[m
 [m
[31m-        param.setExpression('getNode(%r).getNodeName()' % node.getName())[m
[32m+[m[32m        param.setExpression("getNode(%r).getNodeName()" % node.getName())[m
 [m
     def disable_node(self, node_name):[m
         node = self.get_ref_node(node_name)[m
[36m@@ -46,51 +42,50 @@[m [mclass AlembicLoaderNode(NodegraphAPI.SuperTool):[m
             node.setBypassed(False)[m
 [m
     def get_ref_node(self, node_name):[m
[31m-        p = self.getParameter('node_' + node_name)[m
[32m+[m[32m        p = self.getParameter("node_" + node_name)[m
         if not p:[m
             return None[m
 [m
         return NodegraphAPI.GetNode(p.getValue(0))[m
 [m
[31m-    def load_alembics(self, rootdir):[m
[31m-        alembic_nodes = [][m
[31m-        merge_pos = NodegraphAPI.GetNodePosition(self.merge_node)[m
[31m-        for root, subdirs, files in os.walk(rootdir):[m
[31m-            for idx, filename in enumerate(files):[m
[31m-[m
[31m-                if not filename.endswith(".abc"):[m
[31m-                    continue[m
[31m-[m
[31m-                fullpath = root + os.sep + filename[m
[31m-[m
[31m-                name = re.match(AlembicLoaderNode.REGEX_NAME, filename).groups()[0][m
[31m-                version = re.split(AlembicLoaderNode.REGEX_VERSION, filename)[1][m
[31m-[m
[31m-                node = NodegraphAPI.CreateNode("Alembic_In", self)[m
[31m-                node_name = name + "_" + str(version)[m
[31m-                node.setName(node_name)[m
[31m-[m
[31m-                node.getParameter('name').setValue('/root/world/' + name, 1.0)[m
[31m-                node.getParameter('abcAsset').setValue(fullpath, 1.0)[m
[31m-[m
[31m-                root_param = node.getParameters()[m
[31m-                studio_params = root_param.createChildGroup("studio")[m
[31m-                studio_params.createChildNumber("version", int(version[1:]))[m
[31m-[m
[31m-                merge_port = self.merge_node.addInputPort(name)[m
[31m-                node.getOutputPortByIndex(0).connect(merge_port)[m
[31m-                NodegraphAPI.SetNodePosition(node, (0, merge_pos[1]+50*(idx+1)))[m
[31m-[m
[31m-                version_value = int(version[1:])[m
[31m-                current_versions = self.__abc_nodes.get(name)[m
[31m-                if current_versions:[m
[31m-                    current_versions.append(version_value)[m
[31m-                else:                       # cube_geom[m
[31m-                    self.__abc_nodes.update({name: [version_value]})[m
[31m-                                                        # cube_geom_v0001[m
[31m-                self.add_node_reference_param('node_' + node_name, node)[m
[31m-                # node_cube_geom_v0001[m
[31m-[m
[31m-                alembic_nodes.append(node)[m
[31m-[m
[31m-        return alembic_nodes[m
[32m+[m[32m    def get_versions(self, geo_name):[m
[32m+[m[32m        return self.__name_to_versions.get(geo_name)[m
[32m+[m
[32m+[m[32m    def load_alembics(self, directory):[m
[32m+[m[32m        for idx, filename in enumerate(os.listdir(directory)):[m
[32m+[m[32m            if not filename.endswith(".abc"):[m
[32m+[m[32m                continue[m
[32m+[m
[32m+[m[32m            geo_name = re.match(self.REGEX_NAME, filename).groups()[0][m
[32m+[m[32m            version = re.split(self.REGEX_VERSION, filename)[1][m
[32m+[m
[32m+[m[32m            node = NodegraphAPI.CreateNode("Alembic_In", self)[m
[32m+[m[32m            node_name = geo_name + "_" + str(version)[m
[32m+[m[32m            node.setName(node_name)[m
[32m+[m
[32m+[m[32m            # Update Alembic_In node parameters[m
[32m+[m[32m            node.getParameter("name").setValue("/root/world/" + geo_name, 1.0)[m
[32m+[m[32m            node.getParameter("abcAsset").setValue([m
[32m+[m[32m                os.path.join(directory, filename), 1.0[m
[32m+[m[32m            )[m
[32m+[m[32m            node.getOutputPortByIndex(0).connect(self.merge_node.addInputPort(geo_name))[m
[32m+[m[32m            NodegraphAPI.SetNodePosition(node, (0, self.merge_pos[1] + 50 * (idx + 1)))[m
[32m+[m
[32m+[m[32m            # Store all available versions for given geometry[m
[32m+[m[32m            version_num = int(version[1:])[m
[32m+[m[32m            versions = self.__name_to_versions.get(geo_name)[m
[32m+[m[32m            if versions:[m
[32m+[m[32m                versions.append(version_num)[m
[32m+[m[32m            else:[m
[32m+[m[32m                self.__name_to_versions.update({geo_name: [version_num]})[m
[32m+[m
[32m+[m[32m            self.add_node_reference_param("node_" + node_name, node)[m
[32m+[m[32m            yield node[m
[32m+[m
[32m+[m[32m    def update_version(self, curr_version, geo_name, is_enabled):[m
[32m+[m[32m        name_prefix = geo_name + "_v"[m
[32m+[m[32m        for version in self.__name_to_versions.get(geo_name):[m
[32m+[m[32m            if curr_version == version and is_enabled:[m
[32m+[m[32m                self.enable_node(name_prefix + str(curr_version).zfill(3))[m
[32m+[m[32m            else:[m
[32m+[m[32m                self.disable_node(name_prefix + str(version).zfill(3))[m
